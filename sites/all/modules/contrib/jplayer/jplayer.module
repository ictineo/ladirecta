<?php
/**
 * @file
 * Provides an HTML5-compatible with Flash-fallback audio player.
 *
 * This module provides functionality for loading the jPlayer library and
 * formatters for File Fields.
 */

/**
 * Implements hook_menu().
 */
function jplayer_menu() {
  $items = array();

  $items['admin/config/media/jplayer'] = array(
    'title' => 'jPlayer',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('jplayer_settings_form'),
    'access arguments' => array('administer site configuration'),
    'description' => 'Configure the settings for the jPlayer module.',
    'file' => 'includes/jplayer.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function jplayer_theme() {
  return array(
    'jplayer' => array(
      'template' => 'theme/jplayer',
      'variables' => array(
        'entity_type' => NULL,
        'entity' => NULL,
        'field_name' => NULL,
        'items' => array(),
        'settings' => array(),
        'type' => '',
        'playlist' => '',
      ),
      'file' => 'includes/jplayer.theme.inc',
    ),
    'jplayer_item_list' => array(
      'render element' => 'element',
      'file' => 'includes/jplayer.theme.inc',
      'variables' => array(
        'items' => array(),
        'title' => NULL,
        'type' => 'ul',
        'attributes' => array(),
      ),
    ),
    'jplayer_view_playlist' => array(
      'template' => 'theme/jplayer',
      'arguments' => array('view' => NULL, 'items' => NULL),
      'file' => 'includes/jplayer.theme.inc',
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function jplayer_field_formatter_info() {
  return array(
    'jplayer_player' => array(
      'label' => t('jPlayer - Player'),
      'field types' => array('file'),
      'description' => t('Display file fields as an HTML5-compatible with Flash-fallback media player.'),
      'settings' => array(
        'autoplay' => 0,
        'solution' => 'html, flash',
        'preload' => 'metadata',
        'volume' => 80,
        'muted' => FALSE,
        'repeat' => 'none',
        'backgroundColor' => '000000',
        'mode' => 'playlist',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function jplayer_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'jplayer_player':
      if (!empty($items)) {
        $output = theme(
          'jplayer',
          array(
            'entity_type' => $entity_type,
            'entity' => $entity,
            'field_name' => $instance['field_name'],
            'items' => $items,
            'settings' => $display['settings'],
          )
        );
      }
      else {
        return array();
      }
      $element[0] = array(
        '#markup' => $output,
      );
      break;
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function jplayer_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $form = array();

  if ($display['type'] == 'jplayer_player') {
    $form['mode'] = array(
      '#title' => t('Kind'),
      '#type' => 'select',
      '#options' => array(
        'single' => t('Single'),
        'playlist' => t('Playlist'),
      ),
      '#default_value' => $settings['mode'],
    );

    $form['autoplay'] = array(
      '#title' => t('Autoplay'),
      '#type' => 'select',
      '#options' => array(
        0 => t('No'),
        1 => t('Yes'),
      ),
      '#default_value' => $settings['autoplay'],
    );

    $form['solution'] = array(
      '#title' => t('Preferred solution'),
      '#type' => 'select',
      '#options' => array(
        'html, flash' => t('HTML5'),
        'flash, html' => t('Flash'),
      ),
      '#default_value' => $settings['solution'],
    );

    $form['preload'] = array(
      '#title' => t('Preload media'),
      '#type' => 'select',
      '#options' => array(
        'metadata' => t('No'),
        'auto' => t('Yes'),
      ),
      '#description' => t("Preloading media before it's requested isn't available in all browsers."),
      '#default_value' => $settings['preload'],
    );

    $form['volume'] = array(
      '#title' => t('Initial volume'),
      '#type' => 'textfield',
      '#field_suffix' => '%',
      '#maxlength' => 3,
      '#size' => 3,
      '#default_value' => $settings['volume'],
      '#element_validate' => array('jplayer_volume_check'),
    );

    $form['muted'] = array(
      '#title' => t('Initially muted'),
      '#type' => 'select',
      '#options' => array(
        FALSE => t('No'),
        TRUE => t('Yes'),
      ),
      '#default_value' => $settings['muted'],
    );

    $form['repeat'] = array(
      '#title' => t('Repeat'),
      '#type' => 'select',
      '#options' => array(
        'all' => t('All'),
        'single' => t('Single'),
        'none' => t('None'),
      ),
      '#default_value' => $settings['repeat'],
    );

    $form['backgroundColor'] = array(
      '#title' => t('Background color'),
      '#type' => 'textfield',
      '#field_preffix' => '#',
      '#maxlength' => 6,
      '#size' => 6,
      '#default_value' => $settings['backgroundColor'],
    );
  }

  return $form;
}

/**
 * Element validation to check volume is between 0 and 100.
 */
function jplayer_volume_check($element, &$form_state) {
  $value = $element['#value'];

  if ($value < 0 || $value > 100) {
    form_set_error($element, t('Volume must be a percentage between 0% and 100%.'));
  }
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function jplayer_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = '';

  if ($display['type'] == 'jplayer_player') {
    if (isset($settings['autoplay']) && $settings['autoplay'] == 1) {
      $summary = t('Single jPlayer instance which autoplays.');
    }
    else {
      $summary = t('Single jPlayer instance.');
    }
  }

  return $summary;
}

/**
 * Implements hook_library().
 */
function jplayer_library() {
  $path = variable_get('jplayer_directory', 'sites/all/libraries/jplayer');
  $libraries = array();
  $libraries['jplayer'] = array(
    'title' => 'jPlayer',
    'website' => 'http://www.jplayer.org',
    'version' => '2.0',
    'js' => array(
      $path . '/jquery.jplayer.min.js' => array(),
    ),
  );
  return $libraries;
}

/**
 * Return the version of jPlayer installed.
 *
 * @param $directory
 *   The directory to check for a jPlayer installation.
 *
 * @return
 *   An array containing 'version', 'major, and 'minor' keys representing the
 *   version of jPlayer installed, or FALSE if a valid version number was not
 *   found.
 */
function jplayer_get_version($directory = NULL) {
  $version = 0;

  if (!isset($directory)) {
    $directory = variable_get('jplayer_directory', 'sites/all/libraries/jplayer');
  }

  if (file_exists($directory . '/jquery.jplayer.min.js')) {
    $contents = file_get_contents($directory . '/jquery.jplayer.min.js');
  }
  elseif (file_exists($directory . '/jquery.jplayer.js')) {
    $contents = file_get_contents($directory . '/jquery.jplayer.js');
  }
  else {
    return false;
  }

  $matches = array();
  preg_match('/Version:?[ ]*([\d.]+)/i', $contents, $matches);

  if (isset($matches[1])) {
    $version = $matches[1];
  }

  $parts = explode('.', $version);

  // Though other parts of the module may check for a specific version,
  // checking for a positive integer is more of a sanity check here.
  if ($version < 1 || !isset($parts[0]) || !isset($parts[1])) {
    return FALSE;
  }

  return array('version' => $version, 'major' => $parts[0], 'minor' => $parts[1]);
}

/**
 * Add core JS and CSS needed for jPlayer instances
 */
function jplayer_add_core_js() {
  $added = &drupal_static(__FUNCTION__, FALSE);
  if ($added) {
    // Js was already loaded.
    return;
  }
  $added = TRUE;

  // Add global settings
  $settings = array(
    'jPlayer' => array(
      'swfPath' => base_path() . variable_get('jplayer_directory', 'sites/all/libraries/jplayer'),
      'showHour' => (boolean)variable_get('jplayer_showHour', FALSE),
      'showMin' => (boolean)variable_get('jplayer_showMin', TRUE),
      'showSec' => (boolean)variable_get('jplayer_showSec', TRUE),
      'padHour' => (boolean)variable_get('jplayer_padHour', FALSE),
      'padMin' => (boolean)variable_get('jplayer_padMin', TRUE),
      'padSec' => (boolean)variable_get('jplayer_padSec', TRUE),
      'sepHour' => variable_get('jplayer_sepHour', ':'),
      'sepMin' => variable_get('jplayer_sepMin', ':'),
      'sepSec' => variable_get('jplayer_sepSec', ''),
    ),
  );
  drupal_add_js($settings, array('type' => 'setting'));

  $return = array(
    '#attached' => array(
      'library' => array(
        array('jplayer', 'jplayer'),
      ),
      'js' => array(
        drupal_get_path('module', 'jplayer') . '/theme/jplayer.js' => array('type' => 'file', 'scope' => 'footer', 'group' => JS_DEFAULT),
      ),
      'css' => array(
        drupal_get_path('module', 'jplayer') . '/theme/jplayer.css' => array('type' => 'file', 'group' => CSS_DEFAULT),
      ),
    ),
  );

  // Allow other modules to add resources to the page when a jPlayer is
  // embedded.
  if ($additional_resources = module_invoke_all('jplayer_add_js')) {
    $return['additional_resources'] = $additional_resources;
  }

  return $return;
}

/**
 * Implements hook_views_api().
 */
function jplayer_views_api() {
  return array(
    'path' => drupal_get_path('module', 'jplayer') . '/includes',
    'api' => 3.0,
  );
}

